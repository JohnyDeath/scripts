/// Генератор файла Синтаксис помощника для VSCode
/// @author ret-Phoenix
/// @version 0.0.0.1
/// @Module #lib.config

Функция ПолучитьСтруктуруМодуля(ФайлИсточник)

    Парсер = Новый ПарсерМодуля();
    Парсер.УстановитьФайлМодуля(ФайлИсточник);
    Описание = Парсер.ПолучитьОписание();
    Методы = Парсер.ПолучитьМетодыСОписанием();

    Карта = Новый Структура;
    Карта.Вставить("Описание", Описание);
    Карта.Вставить("Методы", Методы);

    Возврат Карта;

КонецФункции // ПолучитьМетодыМодуля()


Функция ЗаписатьРезультатВФайл(ИмяФайла, Данные)
    Текст = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF8);
    Текст.Записать(Данные);
    Текст.Закрыть();
КонецФункции // ЗаписатьРезультатВФайл(ИмяФайла,Данные)

/// Производит замену тегов на ссылки. Обрабатывает: \Link
///
/// @param Описание - Строка с описанием
///
/// @return Строка - Строка с преобразованными ссылками
Функция ОбработатьОписание(Описание)

    РегВыражение = Новый РегулярноеВыражение("{\\link (\S+)}");
    РегВыражение.ИгнорироватьРегистр = Истина;
    Результат = РегВыражение.Заменить(Описание, "<a href='$1.html'>$1</a>");

	Результат = СтрЗаменить(Результат,"""","'");

    Возврат Результат;
    
КонецФункции // ОбработатьОписание(Описание)

/// Добавляет пустую строку. Необходимо для правильного форматирования
/// @param Данные - Строка куда необходимо добавить пустую строку
Процедура ДобавитьПустуюСтроку(Данные)
    Данные = Данные + Символы.ВК + Символы.ПС;
    // Данные = Данные + Символы.ВК + Символы.ПС;
КонецПроцедуры

/// Вывести информацию по методам, по аналогии с СП
///
/// @param ТекстВыхода - Строка - Текст документации
/// @param Строки - Коллекция - Коллекция методов
///
Процедура ОбработатьМетоды(ТекстВыхода, Строки)

    //   "ЗапуститьПриложение": {
    //                     "name": "ЗапуститьПриложение",
    //                     "name_en": "RunApp",
    //                     "signature": "(cmdLine: Строка, currentDir: Строка, wait?: Булево, retCode?: Число)",
    //                     "description": "Запуск приложения в операционной системе",
    //                     "params": {
    //                         "cmdLine": "Командная строка запуска",
    //                         "currentDir": "Текущая директория запускаемого процесса (необязательно)",
    //                         "wait": "Ожидать завершения (необязательно) по умолчанию Ложь",
    //                         "retCode": "Выходной параметр. Код возврата процесса. Имеет смысл только если указан параметр wait=true"
    //                     }
    //                 },

    Для каждого Метод Из Строки Цикл
        ДобавитьПустуюСтроку(ТекстВыхода);
        ТекстВыхода = ТекстВыхода + ("""" + Метод.Имя + """: {");
        ДобавитьПустуюСтроку(ТекстВыхода);
        ТекстВыхода = ТекстВыхода + ("	""name""" + ": ") + ("""" + Метод.Имя + """,");
        ДобавитьПустуюСтроку(ТекстВыхода);
        Сигнатура = "";
        //  "signature": "(path: Строка, externalContext: Структура)",
        Параметры = Метод.Ссылка.Параметры;
        СтрПараметры = "";
        СтрОписаниеПараметров = "";
        Если Параметры <> Неопределено Тогда

            СтрОписаниеПараметров = "";

            Для каждого Параметр Из Параметры Цикл
                Сигнатура = Сигнатура + ", " + СокрЛП(Параметр.Имя);
                Сигнатура = Сигнатура + ?(СокрЛП(Параметр.ЗначениеПоУмолчанию) = "", "", "?");

                СтрОписаниеПараметров = СтрОписаниеПараметров + ", """ + Параметр.Имя + """: " ;
                СтрОписаниеПараметров = СтрОписаниеПараметров + """"+ОбработатьОписание(СокрЛП(Параметр.Описание))+"""";

            КонецЦикла;

            СтрОписаниеПараметров = "	""params"": {" + СокрЛП(Сред((СтрОписаниеПараметров),2)) + "}";
        КонецЕсли;

        Если СокрЛП(Метод.Ссылка.Описание) <> "" Тогда
            ТекстВыхода = ТекстВыхода + "	""description"":";
            ТекстВыхода = ТекстВыхода + """" + ОбработатьОписание(СокрЛП(Метод.Ссылка.Описание)) + """,";
            ДобавитьПустуюСтроку(ТекстВыхода);
        КонецЕсли;

        ТекстВыхода = ТекстВыхода + "	""signature"": ""(" + СокрЛП(Сред(Сигнатура,2)) + ")"",";
        ДобавитьПустуюСтроку(ТекстВыхода);

        ТекстВыхода = ТекстВыхода + СтрОписаниеПараметров;
        

        Если Метод.Ссылка.ВозвращаемоеЗначение <> Неопределено Тогда
			ДобавитьПустуюСтроку(ТекстВыхода);
            ТекстВыхода = ТекстВыхода + ",""returns"": """;

            Для каждого Элемент Из Метод.Ссылка.ВозвращаемоеЗначение Цикл
                ТекстВыхода = ТекстВыхода + Элемент.Ключ;
                ТекстВыхода = ТекстВыхода + ". "; 
                ТекстВыхода = ТекстВыхода + ОбработатьОписание(Элемент.Значение);
                ТекстВыхода = ТекстВыхода + ". "; 
            КонецЦикла;
            ТекстВыхода = ТекстВыхода + """";

        КонецЕсли;


        ТекстВыхода = ТекстВыхода + "},";
    КонецЦикла;
КонецПроцедуры

/// Создать документ в формате Markdown
///
/// @param ФайлИсточник - Строка. Файл модулем
/// @param ФайлПриемник - Строка. Файл с созданной документацией
/// @param ТолькоЭкспортные - Булево. Выводить только публичные (экспортные) методы
///
Процедура СоздатьДокумент(ФайлИсточник, ФайлПриемник, ТолькоЭкспортные) Экспорт
    
    СтруктураМодуля = ПолучитьСтруктуруМодуля(ФайлИсточник);

    ТекстВыхода = "";
    Если СтруктураМодуля.Описание.Имя <> "" Тогда
        ТекстВыхода = ТекстВыхода + """" + СтруктураМодуля.Описание.Имя + """: {";
        ДобавитьПустуюСтроку(ТекстВыхода);
    КонецЕсли;

    Если СтруктураМодуля.Описание.Описание <> "" Тогда
        ТекстВыхода = ТекстВыхода + """description"": " + """" + ОбработатьОписание(СтруктураМодуля.Описание.Описание) + """,";
        ДобавитьПустуюСтроку(ТекстВыхода);
        ДобавитьПустуюСтроку(ТекстВыхода);
    КонецЕсли;

    //# Обработка методов
    Методы = СтруктураМодуля.Методы;
    ТЗМетодов = Новый ТаблицаЗначений;

    ТЗМетодов.Колонки.Добавить("Имя");
    ТЗМетодов.Колонки.Добавить("Публичный");
    ТЗМетодов.Колонки.Добавить("Ссылка");

    Для каждого Метод Из Методы Цикл
        СтрокаТЗ = ТЗМетодов.Добавить();
        СтрокаТЗ.Имя = Метод.Имя;
        СтрокаТЗ.Публичный = Метод.Экспорт;
        СтрокаТЗ.Ссылка = Метод;
    КонецЦикла;
    
    ТЗМетодов.Сортировать("Публичный, Имя");

    //# Генерируем документацию по публичным методам

    ТекстВыхода = ТекстВыхода + """methods"": {";
    ДобавитьПустуюСтроку(ТекстВыхода);

    Отбор = Новый Структура;
    Отбор.Вставить("Публичный", Истина);
    Строки = ТЗМетодов.НайтиСтроки(Отбор);
    
    ОбработатьМетоды(ТекстВыхода, Строки);

    // Если ТолькоЭкспортные = Ложь Тогда
    //     ТекстВыхода = ТекстВыхода + "### Приватные";
    //     ДобавитьПустуюСтроку(ТекстВыхода);

    //     Отбор = Новый Структура;
    //     Отбор.Вставить("Публичный", Ложь);
    //     Строки = ТЗМетодов.НайтиСтроки(Отбор);
    
    //     ОбработатьМетоды(ТекстВыхода, Строки);
    // КонецЕсли;

    ТекстВыхода = ТекстВыхода + "}";
    ТекстВыхода = ТекстВыхода + "},";

    ЗаписатьРезультатВФайл(ФайлПриемник, ТекстВыхода);

КонецПроцедуры