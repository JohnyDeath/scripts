/// Парсер модулей с 1С подобным синтаксисом.
/// За основу разметки взят JavaDoc. 
/// Добавлен свой тег '@Module', может принимать значения: <Имя модуля>, #lib.config - взять имя модуля из описания библиотеки.
/// lib.config ищется в каталоге скрипта и на 1 уровень выше.
/// Ссылки вида '{\\link <Ссылка>}' преобразуются в <Ссылка>.html.
///
/// @author ret-Phoenix
/// @version 0.0.0.2
/// @Module #lib.config

Перем мПутьКФайлуМодуля;

/// @param ИмяФайла - Строка - Путь к файлу с модулем, если файл не указан берется основной файл модуля
/// @return Строка - Если файл прочитан
Функция ПолучитьТекстИзФайла(ИмяФайла = "")
    Если СокрЛП(ИмяФайла) = "" Тогда
        ИмяФайла = мПутьКФайлуМодуля;
    КонецЕсли;

    ФайлОбмена = Новый Файл(ИмяФайла);
    Данные = "";
    Если ФайлОбмена.Существует() Тогда
        Текст = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.UTF8);
        Данные = Текст.Прочитать();
        Текст.Закрыть();
    Иначе
        ВызватьИсключение "Файл не найден: " + ИмяФайла;
    КонецЕсли;
    возврат Данные;
КонецФункции

Функция ПолучитьМетодыСОписанием1С() Экспорт
    
    мПутьКФайлуМодуля = "fixtures/module1.os";
    Данные = ПолучитьТекстИзФайла();

    //РегВыражение = Новый РегулярноеВыражение("(^\s*\/\/(.*)(?=(?:[^(процедура|функция))]*(КонецПроцедуры|КонецФункции)[^(процедура|функция)]*(КонецПроцедуры|КонецФункции))*(?![^\""]*(КонецПроцедуры|КонецФункции)))|^\s*(процедура|функция|procedure|function)\s+(.*)\(((.*)|(.*)\r\n(.*))\)\s+(.*))");
    РегВыражение = Новый РегулярноеВыражение("(^\s*\/\/[^\/](.*)|^\s*(процедура|функция|procedure|function)\s+(.*)\(((.*)|(.*)\r\n(.*))\)\s+(.*)|(КонецПроцедуры|КонецФункции))");
    РегВыражение.ИгнорироватьРегистр = Истина;
    РегВыражение.Многострочный = Истина;

    Совпадения = РегВыражение.НайтиСовпадения(Данные);
    МассивМетодов = Новый Массив;

    Документация = Новый Структура;
    ДокПараметры = Неопределено;
    ДокВозврат = Неопределено;
    ДокОписание = "";

    Для каждого Сп Из Совпадения Цикл

        СпГр = Сп.Группы;

        // Сообщить(СокрЛП(СпГр[0].Значение));
		Сообщить(СокрЛП(СпГр[1].Значение));
        //Сообщить(СокрЛП(СпГр[2].Значение));
        //Сообщить(СокрЛП(СпГр[3].Значение));
        // Сообщить("		"+СокрЛП(СпГр[4].Значение));
	КонецЦикла;

КонецФункции // ПолучитьМетодыСОписанием1С() Экспорт

/// Получает список методов модуля. Для каждого метода создается структура.
/// Структура модуля:
///   - Тип - Процедура / Функция
///   - Имя - Имя метода
///   - Описание - Описание метода
///   - Экспорт - Булево. Истина - экспортный, иначе приватный
///   - Параметры - ТаблицаЗначений параметров:
///     - Имя  
///     - ПоЗначению
///     - ЗначениеПоУмолчанию
///     - Описание
///   - ВозвращаемоеЗначение - Массив возможных возвращаемых значений
///
/// @return Массив - Массив с методами модуля.

Функция ПолучитьМетодыСОписанием() Экспорт
    
    Данные = ПолучитьТекстИзФайла();
    
    РегВыражение = Новый РегулярноеВыражение("(^\s*\/\/\/[^\/](.*)|^\s*(процедура|функция|procedure|function)\s+(.*)\(((.*)|(.*)\r\n(.*))\)\s+(.*))");
    РегВыражение.ИгнорироватьРегистр = Истина;
    РегВыражение.Многострочный = Истина;

    Совпадения = РегВыражение.НайтиСовпадения(Данные);
    МассивМетодов = Новый Массив;

    Документация = Новый Структура;
    ДокПараметры = Неопределено;
    ДокВозврат = Неопределено;
    ДокОписание = "";

    Для каждого Сп Из Совпадения Цикл

        СпГр = Сп.Группы;

        СтрДок = СокрЛП(СпГр[2].Значение);
        Если СтрДок <> ""  Тогда
            ПозицияТире = СтрНайти(СтрДок,"-");

            Если СтрНачинаетсяС(СтрДок,"@param") Тогда
                Если ДокПараметры = Неопределено Тогда
                    ДокПараметры = Новый Структура;
                КонецЕсли;
                ДокПараметры.Вставить(СокрЛП(Сред(СтрДок, 7, ПозицияТире-1-7)), СокрЛП(Сред(СтрДок, ПозицияТире+1)));
            ИначеЕсли СтрНачинаетсяС(СтрДок,"@return") Тогда
                Если ДокВозврат = Неопределено Тогда
                    ДокВозврат = Новый Соответствие;
                КонецЕсли;
                ДокВозврат.Вставить(СокрЛП(Сред(СтрДок, 8, ПозицияТире-1-8)), СокрЛП(Сред(СтрДок, ПозицияТире+1)));
            ИначеЕсли СтрНачинаетсяС(СтрДок,"@Module") Тогда
                ДокПараметры = Неопределено;
                ДокВозврат = Неопределено;
                ДокОписание = "";
            Иначе
                ДокОписание  = ДокОписание  + Символы.ВК + Символы.ПС + СтрДок;
            КонецЕсли;

        Иначе
            
            Если СокрЛП(СпГр[4].Значение) = "" Тогда
                Продолжить;
            КонецЕсли;
            
            СтруктураМетода = Новый Структура;
            СтруктураМетода.Вставить("Тип", СокрЛП(СпГр[3].Значение));
            СтруктураМетода.Вставить("Имя", СокрЛП(СпГр[4].Значение));

            //# Перебор параметров
            СтрПараметры = СокрЛП(СпГр[5].Значение);
            
            Если СтрПараметры <> "" Тогда

                ПараметрыМетода = Новый ТаблицаЗначений;
                ПараметрыМетода.Колонки.Добавить("Имя");
                ПараметрыМетода.Колонки.Добавить("ПоЗначению");
                ПараметрыМетода.Колонки.Добавить("ЗначениеПоУмолчанию");
                ПараметрыМетода.Колонки.Добавить("Описание");

                МассивПараметры = СтрРазделить(СтрПараметры,",", Ложь);
                Для каждого Элемент Из МассивПараметры Цикл
                    Элемент = СокрЛП(Элемент);
                    
                    ПереданПоЗначению = Ложь;
                    Если СтрНачинаетсяС(Элемент, "Знач ") Тогда
                        ПереданПоЗначению = Истина;
                        Элемент = Сред(Элемент,5);
                    КонецЕсли;

                    РегВыражениеЗначения = новый РегулярноеВыражение("(=|\s)(?=(?:[^\""]*\""[^\""]*\"")*(?![^\""]*\""))");
                    
                    РегВыражениеЗамены = новый РегулярноеВыражение("(\s)(?=(?:[^\""]*\""[^\""]*\"")*(?![^\""]*\""))");
                    Элемент = РегВыражениеЗамены.Заменить(Элемент,"");

                    СтруктураПараметра = РегВыражениеЗначения.Разделить(Элемент);

                    СтрокаТЗ = ПараметрыМетода.Добавить();
                    СтрокаТЗ.Имя = СтруктураПараметра[0];
                    СтрокаТЗ.ПоЗначению = ПереданПоЗначению;
                    Если СтруктураПараметра.Количество() >1 Тогда
                        СтрокаТЗ.ЗначениеПоУмолчанию  = СтруктураПараметра[2];
                    КонецЕсли;

                    Если ДокПараметры <> Неопределено Тогда
                        Если ДокПараметры.Свойство(СтрокаТЗ.Имя) Тогда
                            СтрокаТЗ.Описание = ДокПараметры[СтрокаТЗ.Имя];
                        КонецЕсли;
                    КонецЕсли;

                КонецЦикла;
            Иначе
                ПараметрыМетода = Неопределено;
            КонецЕсли;

            СтрокаОригинал = СокрЛП(СпГр[0].Значение);
            РегВыражение = Новый РегулярноеВыражение("\s+(Экспорт)($|\s+|\/\/)");
            РегВыражение.ИгнорироватьРегистр = Истина;            
            Совпадения = РегВыражение.НайтиСовпадения(СтрокаОригинал);

            СтруктураМетода.Вставить("Параметры", ПараметрыМетода);
            СтруктураМетода.Вставить("ВозвращаемоеЗначение", ДокВозврат);
            СтруктураМетода.Вставить("Описание", ДокОписание);
            СтруктураМетода.Вставить("Экспорт", ?(Совпадения.Количество()=0, Ложь, Истина));

            МассивМетодов.Добавить(СтруктураМетода);

            ДокПараметры = Неопределено;
            ДокВозврат = Неопределено;
            ДокОписание = "";

        КонецЕсли;
    КонецЦикла;

    Возврат МассивМетодов;

КонецФункции

/// Получает имя модуля из описания библиотеки (lib.config).
/// Ищет файл lib.config в каталоге с модулем и на 1 ур. выше.
///
/// @return Строка, Неопределено - Имя пакета, если не найдено Неопределено
///
Функция ПолучитьИмяМодуляИзОписанияПакета()

    ФайлОснМодуля = Новый Файл(мПутьКФайлуМодуля);

    Путь = ФайлОснМодуля.Путь;
    Файл = Новый Файл(Путь + "lib.config");
    Данные = Неопределено;
    
    Если Файл.Существует() Тогда
        Данные = ПолучитьТекстИзФайла(Путь + "lib.config");
    Иначе
        Файл = Новый Файл(Путь +  "..\" + "lib.config");
        Если Файл.Существует() Тогда
            Данные = ПолучитьТекстИзФайла(Файл.ПолноеИмя);
        Иначе
            Сообщить("Не найден файл описания библиотеки");
            Возврат Неопределено;
        КонецЕсли;
    КонецЕсли;

    РегВыражение = Новый РегулярноеВыражение("<class name\s*\=\s*""(.*)"" file\s*\=\s*""src\/(.*)""\/>");
    РегВыражение.ИгнорироватьРегистр = Истина;
    РегВыражение.Многострочный = Истина;

    Совпадения = РегВыражение.НайтиСовпадения(Данные);

    Для каждого Сп Из Совпадения Цикл
        СпГр = Сп.Группы;
        Если ВРег(СокрЛП(ФайлОснМодуля.Имя)) = ВРег(СокрЛП(СпГр[2].Значение)) Тогда
            Возврат СокрЛП(СпГр[1].Значение);
        КонецЕсли
    КонецЦикла;    
    Возврат Неопределено;

КонецФункции // ПолучитьИмяМодуляИзОписанияПакета()

/// Возвращает описание модуля в виде структуры с ключами:
///   - Описание
///   - Автор
///   - Версия
///   - Имя
///
/// @return Структура - с описанием модуля
Функция ПолучитьОписание() Экспорт

    Данные = ПолучитьТекстИзФайла();
    
    РегВыражение = Новый РегулярноеВыражение("(^\s*\/\/\/[^\/])(.*)");
    РегВыражение.ИгнорироватьРегистр = Истина;
    РегВыражение.Многострочный = Истина;

    Совпадения = РегВыражение.НайтиСовпадения(Данные);

    ОписаниеМодуля = Новый Структура();
    ОписаниеМодуля.Вставить("Описание", "");
    ОписаниеМодуля.Вставить("Автор", "");
    ОписаниеМодуля.Вставить("Версия", "");
    ОписаниеМодуля.Вставить("Имя", "");

    СтрОписание = "";

    Для каждого Сп Из Совпадения Цикл

        СпГр = Сп.Группы;
        СтрДок = СокрЛП(СпГр[2].Значение);

        Если СтрНачинаетсяС(СтрДок, "@Module") Тогда
            Если СокрЛП(Сред(СтрДок,8)) = "#lib.config" Тогда
                ИмяМодуля = ПолучитьИмяМодуляИзОписанияПакета();
            Иначе
                ИмяМодуля = СокрЛП(Сред(СтрДок,8));
            КонецЕсли;
            ОписаниеМодуля.Вставить("Имя", СокрЛП(ИмяМодуля));
            Прервать;
        ИначеЕсли СтрНачинаетсяС(СтрДок, "@version") Тогда
            ОписаниеМодуля.Вставить("Версия", СокрЛП(Сред(СтрДок,9)));
        ИначеЕсли СтрНачинаетсяС(СтрДок, "@author") Тогда
            ОписаниеМодуля.Вставить("Автор", СокрЛП(Сред(СтрДок,8)));
        Иначе
            СтрОписание  = СтрОписание  + Символы.ВК + Символы.ПС + СтрДок;
        КонецЕсли;

    КонецЦикла;

    ОписаниеМодуля.Вставить("Описание", СокрЛП(СтрОписание));

    Возврат ОписаниеМодуля;

КонецФункции

/// Установка файла модуля для парсера
///
/// @param ИмяФайл - Строка. Путь к файлу модуля
//
Процедура УстановитьФайлМодуля(ИмяФайла) Экспорт
    
    Если СокрЛП(ИмяФайла) = "" Тогда
        ВызватьИсключение "Не указан файл модуля!";
    КонецЕсли;

    мПутьКФайлуМодуля = СокрЛП(ИмяФайла);

КонецПроцедуры

/// Получить путь к файлу модуля
///
/// @return Строка - Путь к файлу модуля
//
Функция ПолучитьФайлМодуля() Экспорт

	Возврат мПутьКФайлуМодуля;

КонецФункции

ПолучитьМетодыСОписанием1С();