/// Генератор документации в формате Markdown
/// @author ret-Phoenix
/// @version 0.0.0.2
/// @Module #lib.config

Функция ПолучитьСтруктуруМодуля(ФайлИсточник)

    Парсер = Новый ПарсерМодуля();
    Парсер.УстановитьФайлМодуля(ФайлИсточник);
    Описание = Парсер.ПолучитьОписание();
    Методы = Парсер.ПолучитьМетодыСОписанием();

    Карта = Новый Структура;
    Карта.Вставить("Описание", Описание);
    Карта.Вставить("Методы", Методы);

    Возврат Карта;

КонецФункции // ПолучитьМетодыМодуля()


Функция ЗаписатьРезультатВФайл(ИмяФайла, Данные)
    Текст = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF8);
    Текст.Записать(Данные);
    Текст.Закрыть();
КонецФункции // ЗаписатьРезультатВФайл(ИмяФайла,Данные)


// Процедура ДобавитьСтроку(Данные, НоваяСтрока)
//     Данные = Данные + НоваяСтрока;
// КонецПроцедуры

/// Добавляет пустую строку. Необходимо для правильного форматирования
/// @param Данные - Строка куда необходимо добавить пустую строку
Процедура ДобавитьПустуюСтроку(Данные)
    Данные = Данные + Символы.ВК + Символы.ПС;
    Данные = Данные + Символы.ВК + Символы.ПС;
КонецПроцедуры

Процедура ОбработатьМетоды(ТекстВыхода, Строки)
    Для каждого Метод Из Строки Цикл
        
        ТекстВыхода = ТекстВыхода + "#### " + Метод.Имя;
        ДобавитьПустуюСтроку(ТекстВыхода);

        ТекстВыхода = ТекстВыхода + "**Синтаксис**";
        ДобавитьПустуюСтроку(ТекстВыхода);

        Параметры = Метод.Ссылка.Параметры;
        СтрПараметры = "";
        СтрОписаниеПараметров = "";
        Если Параметры <> Неопределено Тогда

            СтрОписаниеПараметров = "";

            Для каждого Параметр Из Параметры Цикл
                СтрПараметры = СтрПараметры + ", <" + Параметр.Имя + ">";

                СтрОписаниеПараметров = СтрОписаниеПараметров + "_<" + Параметр.Имя + ">_" 
                + ?(СокрЛП(Параметр.ЗначениеПоУмолчанию) = "", " (обязательный)", " (необязательный)");
                ДобавитьПустуюСтроку(СтрОписаниеПараметров);

                Если СокрЛП(Параметр.Описание) <> "" Тогда
                    СтрОписаниеПараметров = СтрОписаниеПараметров + СокрЛП(Параметр.Описание);
                    ДобавитьПустуюСтроку(СтрОписаниеПараметров);
                КонецЕсли;

            КонецЦикла;

            СтрОписаниеПараметров = "**Параметры:**" + (Символы.ВК + Символы.ПС)+ (Символы.ВК + Символы.ПС) + СтрОписаниеПараметров;
        КонецЕсли;
        ТекстВыхода = ТекстВыхода + Метод.Имя + "(" + СокрЛП(Сред(СтрПараметры,2))  + ")";
        ДобавитьПустуюСтроку(ТекстВыхода);

        ТекстВыхода = ТекстВыхода + СтрОписаниеПараметров;
        ДобавитьПустуюСтроку(ТекстВыхода);

        Если Метод.Ссылка.ВозвращаемоеЗначение <> Неопределено Тогда

            ТекстВыхода = ТекстВыхода + "**Возвращаемое значение:**";
            ДобавитьПустуюСтроку(ТекстВыхода);

            Для каждого Элемент Из Метод.Ссылка.ВозвращаемоеЗначение Цикл
                ТекстВыхода = ТекстВыхода + Элемент.Ключ;
                ДобавитьПустуюСтроку(ТекстВыхода);       
                ТекстВыхода = ТекстВыхода + Элемент.Значение;
                ДобавитьПустуюСтроку(ТекстВыхода); 
            КонецЦикла;

        КонецЕсли;

        Если СокрЛП(Метод.Ссылка.Описание) <> "" Тогда
            ТекстВыхода = ТекстВыхода + "**Описание:**";
            ДобавитьПустуюСтроку(ТекстВыхода);
            ТекстВыхода = ТекстВыхода + СокрЛП(Метод.Ссылка.Описание);
            ДобавитьПустуюСтроку(ТекстВыхода);
        КонецЕсли;

    КонецЦикла;
КонецПроцедуры

/// Создать документ в формате Markdown
/// @param ФайлИсточник - Строка. Файл модулем
/// @param ФайлПриемник - Строка. Файл с созданной документацией
/// @param ТолькоЭкспортные - Булево. Выводить только публичные (экспортные) методы
///
Процедура СоздатьДокумент(ФайлИсточник, ФайлПриемник, ТолькоЭкспортные) Экспорт
    
    СтруктураМодуля = ПолучитьСтруктуруМодуля(ФайлИсточник);

    ТекстВыхода = "";
    Если СтруктураМодуля.Описание.Имя <> "" Тогда
        ТекстВыхода = ТекстВыхода + "# " + СтруктураМодуля.Описание.Имя;
        ДобавитьПустуюСтроку(ТекстВыхода);
    КонецЕсли;

    Если СтруктураМодуля.Описание.Автор <> "" Тогда
        ТекстВыхода = ТекстВыхода + "Автор: " + СтруктураМодуля.Описание.Автор;
        ДобавитьПустуюСтроку(ТекстВыхода);
    КонецЕсли;

    Если СтруктураМодуля.Описание.Версия <> "" Тогда
        ТекстВыхода = ТекстВыхода + "Версия: " + СтруктураМодуля.Описание.Версия;
        ДобавитьПустуюСтроку(ТекстВыхода);
    КонецЕсли;
    
    Если СтруктураМодуля.Описание.Описание <> "" Тогда
        ТекстВыхода = ТекстВыхода + СтруктураМодуля.Описание.Описание;
        ДобавитьПустуюСтроку(ТекстВыхода);
    КонецЕсли;

    //# Обработка методов
    Методы = СтруктураМодуля.Методы;
    ТЗМетодов = Новый ТаблицаЗначений;

    ТЗМетодов.Колонки.Добавить("Имя");
    ТЗМетодов.Колонки.Добавить("Публичный");
    ТЗМетодов.Колонки.Добавить("Ссылка");

    Для каждого Метод Из Методы Цикл
        СтрокаТЗ = ТЗМетодов.Добавить();
        СтрокаТЗ.Имя = Метод.Имя;
        СтрокаТЗ.Публичный = Метод.Экспорт;
        СтрокаТЗ.Ссылка = Метод;
    КонецЦикла;
    
    ТЗМетодов.Сортировать("Публичный, Имя");



    //# Генерируем документацию по публичным методам

    ТекстВыхода = ТекстВыхода + "## Методы";
    ДобавитьПустуюСтроку(ТекстВыхода);

    ТекстВыхода = ТекстВыхода + "### Публичные";
    ДобавитьПустуюСтроку(ТекстВыхода);

    Отбор = Новый Структура;
    Отбор.Вставить("Публичный", Истина);
    Строки = ТЗМетодов.НайтиСтроки(Отбор);
    
    ОбработатьМетоды(ТекстВыхода, Строки);

    Если ТолькоЭкспортные = Ложь Тогда
        ТекстВыхода = ТекстВыхода + "### Приватные";
        ДобавитьПустуюСтроку(ТекстВыхода);

        Отбор = Новый Структура;
        Отбор.Вставить("Публичный", Ложь);
        Строки = ТЗМетодов.НайтиСтроки(Отбор);
        
        ОбработатьМетоды(ТекстВыхода, Строки);
    КонецЕсли;


    ЗаписатьРезультатВФайл(ФайлПриемник, ТекстВыхода);

КонецПроцедуры